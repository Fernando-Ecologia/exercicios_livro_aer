[{"path":"index.html","id":"sobre","chapter":"Sobre","heading":"Sobre","text":"Aqui você encontra os exercícios e soluções livo Análises Ecológicas R.","code":""},{"path":"cap.-4---introdução-ao-r.html","id":"cap.-4---introdução-ao-r","chapter":"Cap. 4 - Introdução ao R","heading":"Cap. 4 - Introdução ao R","text":"4.1\nUse o R para verificar o resultado da operação 7 + 7 ÷ 7 + 7 x 7 - 7.Solução:4.2\nVerifique através R se 3x2³ é maior que 2x3².Solução:4.3\nCrie dois objetos (qualquer nome) com os valores 100 e 300. Multiplique esses objetos (função prod()) e atribuam ao objeto mult. Faça o logaritmo natural (função log()) objeto mult e atribuam ao objeto ln.Solução:4.4\nQuantos pacotes existem CRAN nesse momento? Execute essa combinação Console: nrow(available.packages(repos = \"http://cran.r-project.org\")).Solução:4.5\nInstale o pacote tidyverse CRAN.Solução:4.6\nEscolha números para jogar na mega-sena usando o R, nomeando o objeto como mega. Lembrando: são 6 valores de 1 60 e atribuam um objeto.Solução:4.7 Crie um fator chamado tr, com dois níveis (“cont” e “trat”) para descrever 100 locais de amostragem, 50 de cada tratamento. O fator deve ser dessa forma cont, cont, cont, ...., cont, trat, trat, ...., trat.Solução:4.8\nCrie uma matriz chamada ma, resultante da disposição de um vetor composto por 1000 valores aleatórios entre 0 e 10. matriz deve conter 100 linhas e ser disposta por colunas.Solução:4.9\nCrie um data frame chamado df, resultante da composição dos vetores:id: 1:50sp: sp01, sp02, ..., sp49, sp50ab: 50 valores aleatórios entre 0 5Solução:4.10\nCrie uma lista com os objetos criados anteriormente: mega, tr, ma e df.Solução:4.11\nSelecione os elementos ímpares objeto tr e atribua ao objeto tr_impar.Solução:4.12\nSelecione linhas com ids pares objeto df e atribua ao objeto df_ids_par.Solução:4.13\nFaça uma amostragem de 10 linhas objeto df e atribua ao objeto df_amos10.Solução:4.14\nAmostre 10 linhas objeto ma, mas utilizando linhas amostradas df_amos10 e atribua ao objeto ma_amos10.Solução:4.15\nUna colunas dos objetos df_amos10 e ma_amos10 e atribua ao objeto dados_amos10.Solução:","code":"\n7 + 7 / 7 + 7 * 7 - 7\n#> [1] 50\n3 * 2^3 > 2 * 3^2\n#> [1] TRUE\nobj1 <- 100\nobj2 <- 300\nmult <- prod(obj1, obj2)\nln <- log(obj1, obj2)\nnrow(available.packages(repos = \"http://cran.r-project.org\"))\n#> [1] 18897\ninstall.packages(\"tidyverse\", dependencies = TRUE)\nmega <- sample(x = 1:60, size = 6, replace = FALSE)\nmega\n#> [1]  8 48 19  1 51 41\ntr <- factor(c(rep(\"cont\", each = 50), rep(\"trat\", each = 50)))\ntr\n#>   [1] cont cont cont cont cont cont cont cont cont cont cont\n#>  [12] cont cont cont cont cont cont cont cont cont cont cont\n#>  [23] cont cont cont cont cont cont cont cont cont cont cont\n#>  [34] cont cont cont cont cont cont cont cont cont cont cont\n#>  [45] cont cont cont cont cont cont trat trat trat trat trat\n#>  [56] trat trat trat trat trat trat trat trat trat trat trat\n#>  [67] trat trat trat trat trat trat trat trat trat trat trat\n#>  [78] trat trat trat trat trat trat trat trat trat trat trat\n#>  [89] trat trat trat trat trat trat trat trat trat trat trat\n#> [100] trat\n#> Levels: cont trat\nma <- matrix(sample(0:10, 1000, rep = TRUE), nrow = 100, byrow = FALSE)\nma\n#>        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n#>   [1,]    7    3    7    9    1    4    6    0    3     2\n#>   [2,]    0    5   10    0    3    5    9    0    4     7\n#>   [3,]    0    0    4    4    5    0    5    5    7     2\n#>   [4,]    2    9   10    6    6    0    1    5    5     8\n#>   [5,]    6    2    9    2    3    8    6    4    8     6\n#>   [6,]   10    7   10    2    1    5    6    7    1     6\n#>   [7,]    7    0   10    8    4    4    7    0    1     8\n#>   [8,]    0    6   10    6    5    8    2    3    2     9\n#>   [9,]    6    5    6    9    9    1    9    5    4     3\n#>  [10,]    7    0    7    2    7    4    5    9    5     0\n#>  [11,]   10    1    4    0    8    5    7    5    2     5\n#>  [12,]    0    4    3    0    4    6    5    6    4     3\n#>  [13,]    6    1    7    2    5    0    4    9    6     1\n#>  [14,]    0    1    8    6    9    1    0    6   10     1\n#>  [15,]    3    1    5    5    1    1    5    8    1     6\n#>  [16,]    8    8    0    6   10    9    7    2   10     0\n#>  [17,]    3    7    2    9    1    9    2    5    3     3\n#>  [18,]    3    9    7    0    0    2    5    9    6     1\n#>  [19,]    1    5    4    3    0    1    0    9    6     2\n#>  [20,]    0    9    8    4    0    5    8    9    9     4\n#>  [21,]    9   10    3    4    2    9    8    2   10     5\n#>  [22,]    4    4    5    4    7    0    9    5    8     4\n#>  [23,]    0    8    2    1    3    4    3    1    7     3\n#>  [24,]   10    9    8    5    2    7    0    0    1     3\n#>  [25,]    0    8   10    1    3    7    2    0    6     4\n#>  [26,]    9    6    4    3    1    9    7    5    0     2\n#>  [27,]    3    7    4    6    0    3    3    1    5     7\n#>  [28,]    2    3   10    2    1    9    7    1    8     7\n#>  [29,]    6    7    4    0    8    2    9   10    5     6\n#>  [30,]    7    6    5    7    4    0    3    9    9     7\n#>  [31,]    6    2    1    3    1   10    9    4    9     1\n#>  [32,]    1   10    1    0    0    8   10   10    8     8\n#>  [33,]    6    3    3    9    4    8    9    2    0     3\n#>  [34,]    5    7    6    0   10    4    1    3    8     6\n#>  [35,]    3    1    5    8    6    0   10    1    9     9\n#>  [36,]    7    0    1    9    6    1    4    1    6     9\n#>  [37,]    6    6   10    5    3    6    4   10    8     0\n#>  [38,]    4    1    6    8    5    8    4    9    1     6\n#>  [39,]   10    0    6    1    3    2    4    1    5     6\n#>  [40,]    0    3    5    8    6    0    7    1    9     7\n#>  [41,]    5    6    4    9    9    1    7   10    3     8\n#>  [42,]    5    1    0    8    6    4    1    0    2     3\n#>  [43,]    9    3    2    3    7    8    9    8    7     1\n#>  [44,]    4   10    0    9   10    0    3    5    3     8\n#>  [45,]   10    9    1    7    6    9   10    8    9     3\n#>  [46,]   10    9   10    1    6    1    4    7    9     5\n#>  [47,]    0   10    2    7    8    1    9    8    4     9\n#>  [48,]    2   10    7    7    9    0    0    4    1    10\n#>  [49,]    7    0    2    7    5    1    1    7    5     3\n#>  [50,]   10    9    8    6   10   10    6    7   10     8\n#>  [51,]    4    9    0   10    5    1    8    3    9    10\n#>  [52,]    1    6    5    9    3    0    0   10    9    10\n#>  [53,]    2    8   10    6    1    8    2    3    3     7\n#>  [54,]    4    1    6    4    2    7    4    7    8     9\n#>  [55,]    7    4    9    8    0    8    3    7    6     6\n#>  [56,]    1    4   10    1    8    8    0    5    1     5\n#>  [57,]    7    6    9    0    7    2    0    6    2     4\n#>  [58,]    7    0    2    0    8    2    0    9    6     0\n#>  [59,]    6    2    7    3    2    6    8    8    1     6\n#>  [60,]    5    8    1    4    7    3    7    5    0    10\n#>  [61,]    3    0    2    7    3    3    6    1    0     9\n#>  [62,]    1    6    8    7    9   10    1    3    9    10\n#>  [63,]   10    7    7    3   10    5    1    8    9     7\n#>  [64,]   10    8    9    6    0    6    4   10    7     6\n#>  [65,]   10    2    7    7    1    5    4    6   10     4\n#>  [66,]    7   10    0    5    2    5   10    0    5     4\n#>  [67,]    7    0   10   10    6    9    0    3    3    10\n#>  [68,]    1    4    6    1    2    8    5   10    8     9\n#>  [69,]    7    7    9    5    6    5    3    0    9     0\n#>  [70,]    5    8    0    3    2    3    2    2    3     2\n#>  [71,]    8    2    9   10    4    4    4    6    0     3\n#>  [72,]    9    3    0    9    4    7    7    4    4     8\n#>  [73,]    7    0    7    8    5    2   10    8    3     1\n#>  [74,]    9   10    2   10    3    0    3    2    8    10\n#>  [75,]    8    2    1    0    1    1    4    9    6     3\n#>  [76,]    3    2    7    6   10    2    4    0    8     5\n#>  [77,]   10    0    3    5    3    9    5    6    6     9\n#>  [78,]    9    9   10    1    8    1    6    8   10     8\n#>  [79,]    3    6    2    7    4    9    4   10    4     7\n#>  [80,]    6    1    2    5    9    8    0    2    5     6\n#>  [81,]    6    0    1    7    6    3    0    7    0     1\n#>  [82,]    4    0    9    4    5    8   10   10    8    10\n#>  [83,]    0    1    7    6   10    9   10    1    9     2\n#>  [84,]    2    6    8    9    0    9    1    7    4     1\n#>  [85,]    1   10    9    5    9    4    4    1    0     3\n#>  [86,]   10    2    3    4   10    4    0    1    4     9\n#>  [87,]    2    5    0    2    8    5    1    8    1     8\n#>  [88,]    2    4    4    1    6    4   10    4    2     1\n#>  [89,]    2    7   10   10    6    9    9    0    4     4\n#>  [90,]    5   10   10    6    7    8    7    0    2     2\n#>  [91,]    3    5    1    5    0    7    0    3    2     4\n#>  [92,]    5    2    8    2    4    9    0    0    8     7\n#>  [93,]    5   10    9    8    1    4    4    2    6     4\n#>  [94,]    0    4    7    8    7    6    9    3    7     7\n#>  [95,]   10    1    3    7   10    8    0    9    2     6\n#>  [96,]    0    6   10    7    5    8    1    9    5    10\n#>  [97,]    2   10    0    4    6    3    4    6    8     9\n#>  [98,]   10    6    2    0    8    4    1    4    4     9\n#>  [99,]    1    2    1    9    2    4    9    8    6    10\n#> [100,]    0    2   10    2    0    4    3   10    4    10\ndf <- data.frame(id = 1:50,\n                  sp = c(paste0(\"sp0\", 1:9), paste0(\"sp\", 10:50)),\n                  ab = sample(0:5, 50, rep = TRUE))\ndf\n#>    id   sp ab\n#> 1   1 sp01  0\n#> 2   2 sp02  2\n#> 3   3 sp03  4\n#> 4   4 sp04  0\n#> 5   5 sp05  1\n#> 6   6 sp06  4\n#> 7   7 sp07  2\n#> 8   8 sp08  1\n#> 9   9 sp09  2\n#> 10 10 sp10  2\n#> 11 11 sp11  2\n#> 12 12 sp12  5\n#> 13 13 sp13  3\n#> 14 14 sp14  1\n#> 15 15 sp15  5\n#> 16 16 sp16  1\n#> 17 17 sp17  2\n#> 18 18 sp18  5\n#> 19 19 sp19  0\n#> 20 20 sp20  4\n#> 21 21 sp21  1\n#> 22 22 sp22  1\n#> 23 23 sp23  2\n#> 24 24 sp24  2\n#> 25 25 sp25  3\n#> 26 26 sp26  5\n#> 27 27 sp27  0\n#> 28 28 sp28  1\n#> 29 29 sp29  2\n#> 30 30 sp30  0\n#> 31 31 sp31  3\n#> 32 32 sp32  3\n#> 33 33 sp33  0\n#> 34 34 sp34  4\n#> 35 35 sp35  4\n#> 36 36 sp36  2\n#> 37 37 sp37  1\n#> 38 38 sp38  4\n#> 39 39 sp39  4\n#> 40 40 sp40  2\n#> 41 41 sp41  2\n#> 42 42 sp42  5\n#> 43 43 sp43  3\n#> 44 44 sp44  3\n#> 45 45 sp45  2\n#> 46 46 sp46  3\n#> 47 47 sp47  3\n#> 48 48 sp48  4\n#> 49 49 sp49  2\n#> 50 50 sp50  3\nlis <- list(mega, tr, ma, df)\nlis\n#> [[1]]\n#> [1]  8 48 19  1 51 41\n#> \n#> [[2]]\n#>   [1] cont cont cont cont cont cont cont cont cont cont cont\n#>  [12] cont cont cont cont cont cont cont cont cont cont cont\n#>  [23] cont cont cont cont cont cont cont cont cont cont cont\n#>  [34] cont cont cont cont cont cont cont cont cont cont cont\n#>  [45] cont cont cont cont cont cont trat trat trat trat trat\n#>  [56] trat trat trat trat trat trat trat trat trat trat trat\n#>  [67] trat trat trat trat trat trat trat trat trat trat trat\n#>  [78] trat trat trat trat trat trat trat trat trat trat trat\n#>  [89] trat trat trat trat trat trat trat trat trat trat trat\n#> [100] trat\n#> Levels: cont trat\n#> \n#> [[3]]\n#>        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n#>   [1,]    7    3    7    9    1    4    6    0    3     2\n#>   [2,]    0    5   10    0    3    5    9    0    4     7\n#>   [3,]    0    0    4    4    5    0    5    5    7     2\n#>   [4,]    2    9   10    6    6    0    1    5    5     8\n#>   [5,]    6    2    9    2    3    8    6    4    8     6\n#>   [6,]   10    7   10    2    1    5    6    7    1     6\n#>   [7,]    7    0   10    8    4    4    7    0    1     8\n#>   [8,]    0    6   10    6    5    8    2    3    2     9\n#>   [9,]    6    5    6    9    9    1    9    5    4     3\n#>  [10,]    7    0    7    2    7    4    5    9    5     0\n#>  [11,]   10    1    4    0    8    5    7    5    2     5\n#>  [12,]    0    4    3    0    4    6    5    6    4     3\n#>  [13,]    6    1    7    2    5    0    4    9    6     1\n#>  [14,]    0    1    8    6    9    1    0    6   10     1\n#>  [15,]    3    1    5    5    1    1    5    8    1     6\n#>  [16,]    8    8    0    6   10    9    7    2   10     0\n#>  [17,]    3    7    2    9    1    9    2    5    3     3\n#>  [18,]    3    9    7    0    0    2    5    9    6     1\n#>  [19,]    1    5    4    3    0    1    0    9    6     2\n#>  [20,]    0    9    8    4    0    5    8    9    9     4\n#>  [21,]    9   10    3    4    2    9    8    2   10     5\n#>  [22,]    4    4    5    4    7    0    9    5    8     4\n#>  [23,]    0    8    2    1    3    4    3    1    7     3\n#>  [24,]   10    9    8    5    2    7    0    0    1     3\n#>  [25,]    0    8   10    1    3    7    2    0    6     4\n#>  [26,]    9    6    4    3    1    9    7    5    0     2\n#>  [27,]    3    7    4    6    0    3    3    1    5     7\n#>  [28,]    2    3   10    2    1    9    7    1    8     7\n#>  [29,]    6    7    4    0    8    2    9   10    5     6\n#>  [30,]    7    6    5    7    4    0    3    9    9     7\n#>  [31,]    6    2    1    3    1   10    9    4    9     1\n#>  [32,]    1   10    1    0    0    8   10   10    8     8\n#>  [33,]    6    3    3    9    4    8    9    2    0     3\n#>  [34,]    5    7    6    0   10    4    1    3    8     6\n#>  [35,]    3    1    5    8    6    0   10    1    9     9\n#>  [36,]    7    0    1    9    6    1    4    1    6     9\n#>  [37,]    6    6   10    5    3    6    4   10    8     0\n#>  [38,]    4    1    6    8    5    8    4    9    1     6\n#>  [39,]   10    0    6    1    3    2    4    1    5     6\n#>  [40,]    0    3    5    8    6    0    7    1    9     7\n#>  [41,]    5    6    4    9    9    1    7   10    3     8\n#>  [42,]    5    1    0    8    6    4    1    0    2     3\n#>  [43,]    9    3    2    3    7    8    9    8    7     1\n#>  [44,]    4   10    0    9   10    0    3    5    3     8\n#>  [45,]   10    9    1    7    6    9   10    8    9     3\n#>  [46,]   10    9   10    1    6    1    4    7    9     5\n#>  [47,]    0   10    2    7    8    1    9    8    4     9\n#>  [48,]    2   10    7    7    9    0    0    4    1    10\n#>  [49,]    7    0    2    7    5    1    1    7    5     3\n#>  [50,]   10    9    8    6   10   10    6    7   10     8\n#>  [51,]    4    9    0   10    5    1    8    3    9    10\n#>  [52,]    1    6    5    9    3    0    0   10    9    10\n#>  [53,]    2    8   10    6    1    8    2    3    3     7\n#>  [54,]    4    1    6    4    2    7    4    7    8     9\n#>  [55,]    7    4    9    8    0    8    3    7    6     6\n#>  [56,]    1    4   10    1    8    8    0    5    1     5\n#>  [57,]    7    6    9    0    7    2    0    6    2     4\n#>  [58,]    7    0    2    0    8    2    0    9    6     0\n#>  [59,]    6    2    7    3    2    6    8    8    1     6\n#>  [60,]    5    8    1    4    7    3    7    5    0    10\n#>  [61,]    3    0    2    7    3    3    6    1    0     9\n#>  [62,]    1    6    8    7    9   10    1    3    9    10\n#>  [63,]   10    7    7    3   10    5    1    8    9     7\n#>  [64,]   10    8    9    6    0    6    4   10    7     6\n#>  [65,]   10    2    7    7    1    5    4    6   10     4\n#>  [66,]    7   10    0    5    2    5   10    0    5     4\n#>  [67,]    7    0   10   10    6    9    0    3    3    10\n#>  [68,]    1    4    6    1    2    8    5   10    8     9\n#>  [69,]    7    7    9    5    6    5    3    0    9     0\n#>  [70,]    5    8    0    3    2    3    2    2    3     2\n#>  [71,]    8    2    9   10    4    4    4    6    0     3\n#>  [72,]    9    3    0    9    4    7    7    4    4     8\n#>  [73,]    7    0    7    8    5    2   10    8    3     1\n#>  [74,]    9   10    2   10    3    0    3    2    8    10\n#>  [75,]    8    2    1    0    1    1    4    9    6     3\n#>  [76,]    3    2    7    6   10    2    4    0    8     5\n#>  [77,]   10    0    3    5    3    9    5    6    6     9\n#>  [78,]    9    9   10    1    8    1    6    8   10     8\n#>  [79,]    3    6    2    7    4    9    4   10    4     7\n#>  [80,]    6    1    2    5    9    8    0    2    5     6\n#>  [81,]    6    0    1    7    6    3    0    7    0     1\n#>  [82,]    4    0    9    4    5    8   10   10    8    10\n#>  [83,]    0    1    7    6   10    9   10    1    9     2\n#>  [84,]    2    6    8    9    0    9    1    7    4     1\n#>  [85,]    1   10    9    5    9    4    4    1    0     3\n#>  [86,]   10    2    3    4   10    4    0    1    4     9\n#>  [87,]    2    5    0    2    8    5    1    8    1     8\n#>  [88,]    2    4    4    1    6    4   10    4    2     1\n#>  [89,]    2    7   10   10    6    9    9    0    4     4\n#>  [90,]    5   10   10    6    7    8    7    0    2     2\n#>  [91,]    3    5    1    5    0    7    0    3    2     4\n#>  [92,]    5    2    8    2    4    9    0    0    8     7\n#>  [93,]    5   10    9    8    1    4    4    2    6     4\n#>  [94,]    0    4    7    8    7    6    9    3    7     7\n#>  [95,]   10    1    3    7   10    8    0    9    2     6\n#>  [96,]    0    6   10    7    5    8    1    9    5    10\n#>  [97,]    2   10    0    4    6    3    4    6    8     9\n#>  [98,]   10    6    2    0    8    4    1    4    4     9\n#>  [99,]    1    2    1    9    2    4    9    8    6    10\n#> [100,]    0    2   10    2    0    4    3   10    4    10\n#> \n#> [[4]]\n#>    id   sp ab\n#> 1   1 sp01  0\n#> 2   2 sp02  2\n#> 3   3 sp03  4\n#> 4   4 sp04  0\n#> 5   5 sp05  1\n#> 6   6 sp06  4\n#> 7   7 sp07  2\n#> 8   8 sp08  1\n#> 9   9 sp09  2\n#> 10 10 sp10  2\n#> 11 11 sp11  2\n#> 12 12 sp12  5\n#> 13 13 sp13  3\n#> 14 14 sp14  1\n#> 15 15 sp15  5\n#> 16 16 sp16  1\n#> 17 17 sp17  2\n#> 18 18 sp18  5\n#> 19 19 sp19  0\n#> 20 20 sp20  4\n#> 21 21 sp21  1\n#> 22 22 sp22  1\n#> 23 23 sp23  2\n#> 24 24 sp24  2\n#> 25 25 sp25  3\n#> 26 26 sp26  5\n#> 27 27 sp27  0\n#> 28 28 sp28  1\n#> 29 29 sp29  2\n#> 30 30 sp30  0\n#> 31 31 sp31  3\n#> 32 32 sp32  3\n#> 33 33 sp33  0\n#> 34 34 sp34  4\n#> 35 35 sp35  4\n#> 36 36 sp36  2\n#> 37 37 sp37  1\n#> 38 38 sp38  4\n#> 39 39 sp39  4\n#> 40 40 sp40  2\n#> 41 41 sp41  2\n#> 42 42 sp42  5\n#> 43 43 sp43  3\n#> 44 44 sp44  3\n#> 45 45 sp45  2\n#> 46 46 sp46  3\n#> 47 47 sp47  3\n#> 48 48 sp48  4\n#> 49 49 sp49  2\n#> 50 50 sp50  3\ntr_impar <- tr[seq(1, 99, 2)]\ntr_impar\n#>  [1] cont cont cont cont cont cont cont cont cont cont cont\n#> [12] cont cont cont cont cont cont cont cont cont cont cont\n#> [23] cont cont cont trat trat trat trat trat trat trat trat\n#> [34] trat trat trat trat trat trat trat trat trat trat trat\n#> [45] trat trat trat trat trat trat\n#> Levels: cont trat\ndf_ids_par <- df[seq(2, 100, 2), ]\ndf_ids_par\n#>       id   sp ab\n#> 2      2 sp02  2\n#> 4      4 sp04  0\n#> 6      6 sp06  4\n#> 8      8 sp08  1\n#> 10    10 sp10  2\n#> 12    12 sp12  5\n#> 14    14 sp14  1\n#> 16    16 sp16  1\n#> 18    18 sp18  5\n#> 20    20 sp20  4\n#> 22    22 sp22  1\n#> 24    24 sp24  2\n#> 26    26 sp26  5\n#> 28    28 sp28  1\n#> 30    30 sp30  0\n#> 32    32 sp32  3\n#> 34    34 sp34  4\n#> 36    36 sp36  2\n#> 38    38 sp38  4\n#> 40    40 sp40  2\n#> 42    42 sp42  5\n#> 44    44 sp44  3\n#> 46    46 sp46  3\n#> 48    48 sp48  4\n#> 50    50 sp50  3\n#> NA    NA <NA> NA\n#> NA.1  NA <NA> NA\n#> NA.2  NA <NA> NA\n#> NA.3  NA <NA> NA\n#> NA.4  NA <NA> NA\n#> NA.5  NA <NA> NA\n#> NA.6  NA <NA> NA\n#> NA.7  NA <NA> NA\n#> NA.8  NA <NA> NA\n#> NA.9  NA <NA> NA\n#> NA.10 NA <NA> NA\n#> NA.11 NA <NA> NA\n#> NA.12 NA <NA> NA\n#> NA.13 NA <NA> NA\n#> NA.14 NA <NA> NA\n#> NA.15 NA <NA> NA\n#> NA.16 NA <NA> NA\n#> NA.17 NA <NA> NA\n#> NA.18 NA <NA> NA\n#> NA.19 NA <NA> NA\n#> NA.20 NA <NA> NA\n#> NA.21 NA <NA> NA\n#> NA.22 NA <NA> NA\n#> NA.23 NA <NA> NA\n#> NA.24 NA <NA> NA\ndf_amos10 <- df[sample(nrow(df), 10), ]\ndf_amos10\n#>    id   sp ab\n#> 5   5 sp05  1\n#> 21 21 sp21  1\n#> 43 43 sp43  3\n#> 10 10 sp10  2\n#> 50 50 sp50  3\n#> 37 37 sp37  1\n#> 30 30 sp30  0\n#> 38 38 sp38  4\n#> 18 18 sp18  5\n#> 31 31 sp31  3\nma_amos10 <- ma[df_amos10$id, ]\nma_amos10\n#>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n#>  [1,]    6    2    9    2    3    8    6    4    8     6\n#>  [2,]    9   10    3    4    2    9    8    2   10     5\n#>  [3,]    9    3    2    3    7    8    9    8    7     1\n#>  [4,]    7    0    7    2    7    4    5    9    5     0\n#>  [5,]   10    9    8    6   10   10    6    7   10     8\n#>  [6,]    6    6   10    5    3    6    4   10    8     0\n#>  [7,]    7    6    5    7    4    0    3    9    9     7\n#>  [8,]    4    1    6    8    5    8    4    9    1     6\n#>  [9,]    3    9    7    0    0    2    5    9    6     1\n#> [10,]    6    2    1    3    1   10    9    4    9     1\ndados_amos10 <- cbind(df_amos10, ma_amos10)\ndados_amos10\n#>    id   sp ab  1  2  3 4  5  6 7  8  9 10\n#> 5   5 sp05  1  6  2  9 2  3  8 6  4  8  6\n#> 21 21 sp21  1  9 10  3 4  2  9 8  2 10  5\n#> 43 43 sp43  3  9  3  2 3  7  8 9  8  7  1\n#> 10 10 sp10  2  7  0  7 2  7  4 5  9  5  0\n#> 50 50 sp50  3 10  9  8 6 10 10 6  7 10  8\n#> 37 37 sp37  1  6  6 10 5  3  6 4 10  8  0\n#> 30 30 sp30  0  7  6  5 7  4  0 3  9  9  7\n#> 38 38 sp38  4  4  1  6 8  5  8 4  9  1  6\n#> 18 18 sp18  5  3  9  7 0  0  2 5  9  6  1\n#> 31 31 sp31  3  6  2  1 3  1 10 9  4  9  1"},{"path":"cap.-5---tidyverse.html","id":"cap.-5---tidyverse","chapter":"Cap. 5 - Tidyverse","heading":"Cap. 5 - Tidyverse","text":"5.1\nReescreva operações abaixo utilizando pipes %>%.\n- log10(cumsum(1:100))\n- sum(sqrt(abs(rnorm(100))))\n- sum(sort(sample(1:10, 10000, rep = TRUE)))Solução:5.2\nUse função download.file() e unzip() para baixar e extrair o arquivo data paper de médios e grandes mamíferos: ATLANTIC MAMMALS. Em seguinda, importe para o R, usando função readr::read_csv().Solução:5.3\nUse função tibble::glimpse() para ter uma noção geral dos dados importados item anterior.Solução:5.4\nCompare os dados de penguins (palmerpenguins::penguins_raw e palmerpenguins::penguins). Monte uma série de funções dos pacotes tidyr e dplyr para limpar os dados e fazer com que o primeiro dado seja igual ao segundo.Solução:5.5\nUsando os dados de penguins (palmerpenguins::penguins), calcule correlação de Pearson entre comprimento e profundidade bico para cada espécie e para todas espécies. Compare os índices de correlação para exemplificar o Paradoxo de Simpsom.Solução:5.6\nOficialmente pandemia de COVID-19 começou Brasil com o primeiro caso dia 26 de fevereiro de 2020. Calcule quantos anos, meses e dias se passou desde então. Calcule também quanto tempo se passou até você ser vacinado.Solução:","code":"\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────── tidyverse 1.3.1 ──\n#> ✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n#> ✓ tibble  3.1.6     ✓ dplyr   1.0.7\n#> ✓ tidyr   1.1.4     ✓ stringr 1.4.0\n#> ✓ readr   2.1.1     ✓ forcats 0.5.1\n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()\n\n1:100 %>% \n    cumsum() %>% \n    log10()\n#>   [1] 0.0000000 0.4771213 0.7781513 1.0000000 1.1760913\n#>   [6] 1.3222193 1.4471580 1.5563025 1.6532125 1.7403627\n#>  [11] 1.8195439 1.8920946 1.9590414 2.0211893 2.0791812\n#>  [16] 2.1335389 2.1846914 2.2329961 2.2787536 2.3222193\n#>  [21] 2.3636120 2.4031205 2.4409091 2.4771213 2.5118834\n#>  [26] 2.5453071 2.5774918 2.6085260 2.6384893 2.6674530\n#>  [31] 2.6954817 2.7226339 2.7489629 2.7745170 2.7993405\n#>  [36] 2.8234742 2.8469553 2.8698182 2.8920946 2.9138139\n#>  [41] 2.9350032 2.9556878 2.9758911 2.9956352 3.0149403\n#>  [46] 3.0338257 3.0523091 3.0704073 3.0881361 3.1055102\n#>  [51] 3.1225435 3.1392492 3.1556396 3.1717265 3.1875207\n#>  [56] 3.2030329 3.2182729 3.2332500 3.2479733 3.2624511\n#>  [61] 3.2766915 3.2907022 3.3044905 3.3180633 3.3314273\n#>  [66] 3.3445887 3.3575537 3.3703280 3.3829171 3.3953264\n#>  [71] 3.4075608 3.4196254 3.4315246 3.4432630 3.4548449\n#>  [76] 3.4662743 3.4775553 3.4886917 3.4996871 3.5105450\n#>  [81] 3.5212689 3.5318619 3.5423274 3.5526682 3.5628874\n#>  [86] 3.5729877 3.5829719 3.5928427 3.6026025 3.6122539\n#>  [91] 3.6217992 3.6312408 3.6405808 3.6498215 3.6589648\n#>  [96] 3.6680130 3.6769678 3.6858313 3.6946052 3.7032914\n\nrnorm(100) %>% \n    abs() %>% \n    sqrt() %>% \n    sum()\n#> [1] 78.05671\n\nsample(1:10, 10000, rep = TRUE) %>% \n    sort() %>% \n    sum()\n#> [1] 54887\nlibrary(tidyverse)\ndownload.file(url = \"https://esajournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fecy.2785&file=ecy2785-sup-0001-DataS1.zip\", \n              destfile = \"ecy2785-sup-0001-DataS1.zip\", mode = \"wb\")\n\nunzip(\"ecy2785-sup-0001-DataS1.zip\")\n\ndp_lm <- readr::read_csv(\"ATLANTIC_MAMMAL_MID_LARGE _assemblages_and_sites.csv\")\n#> Warning: One or more parsing issues, see `problems()` for\n#> details\n#> Rows: 4680 Columns: 40\n#> ── Column specification ────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (27): ID, Country, State, Municipality, Study_locati...\n#> dbl (11): Reference_paper_number, Publication_year, Year...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nlibrary(tidyverse)\ndplyr::glimpse(dp_lm)\n#> Rows: 4,680\n#> Columns: 40\n#> $ ID                     <chr> \"AML01\", \"AML01\", \"AML01\", …\n#> $ Reference_paper_number <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n#> $ Country                <chr> \"Brazil\", \"Brazil\", \"Brazil…\n#> $ State                  <chr> \"rio_grande_do_sul\", \"rio_g…\n#> $ Municipality           <chr> \"Sinimbu\", \"Sinimbu\", \"Sini…\n#> $ Study_location         <chr> \"Reserva Particular do Patr…\n#> $ Latitude               <dbl> -29.38333, -29.38333, -29.3…\n#> $ Longitude              <dbl> -52.53333, -52.53333, -52.5…\n#> $ Precision              <chr> \"not_precise\", \"not_precise…\n#> $ Size_ha                <chr> \"221\", \"221\", \"221\", \"221\",…\n#> $ Temperature            <chr> \"18\", \"18\", \"18\", \"18\", \"18…\n#> $ Altitude               <chr> \"150-650\", \"150-650\", \"150-…\n#> $ Annual_rainfall        <chr> NA, NA, NA, NA, NA, NA, NA,…\n#> $ Vegetation_type        <chr> \"Semideciduous forest\", \"Se…\n#> $ Protect_area           <chr> \"yes\", \"yes\", \"yes\", \"yes\",…\n#> $ Matrix                 <chr> NA, NA, NA, NA, NA, NA, NA,…\n#> $ Reference              <chr> \"Abreu-Junior, E.F. and Koh…\n#> $ Publication_year       <dbl> 2009, 2009, 2009, 2009, 200…\n#> $ Type_of_publication    <chr> \"Article\", \"Article\", \"Arti…\n#> $ Month_start            <chr> \"November\", \"November\", \"No…\n#> $ Year_start             <dbl> 2007, 2007, 2007, 2007, 200…\n#> $ Month_finish           <chr> \"April\", \"April\", \"April\", …\n#> $ Year_finish            <dbl> 2009, 2009, 2009, 2009, 200…\n#> $ Total_of_months        <dbl> 6, 6, 6, 6, 6, 6, 6, 6, 6, …\n#> $ Sampling_habitat       <chr> \"Interior\", \"Interior\", \"In…\n#> $ Effort                 <dbl> 109.00, 109.00, 109.00, 109…\n#> $ Effort_method          <chr> \"camera_days\", \"camera_days…\n#> $ Method                 <chr> \"mixed_method\", \"mixed_meth…\n#> $ Order                  <chr> \"Carnivora\", \"Rodentia\", \"C…\n#> $ Genus_on_paper         <chr> \"Cerdocyon\", \"Cuniculus\", \"…\n#> $ Species_name_on_paper  <chr> \"Cerdocyon thous\", \"Cunicul…\n#> $ Actual_species_Name    <chr> \"Cerdocyon thous\", \"Cunicul…\n#> $ Number_of_record       <chr> NA, NA, NA, NA, NA, NA, NA,…\n#> $ `Density(groups/km2)`  <dbl> NA, NA, NA, NA, NA, NA, NA,…\n#> $ `Density(ind/km2)`     <chr> NA, NA, NA, NA, NA, NA, NA,…\n#> $ `Density(ind/km10)`    <dbl> NA, NA, NA, NA, NA, NA, NA,…\n#> $ `Abundance(%)`         <dbl> NA, NA, NA, NA, NA, NA, NA,…\n#> $ Abudance_relative      <dbl> NA, NA, NA, NA, NA, NA, NA,…\n#> $ `Abundance(10/km)`     <dbl> NA, NA, NA, NA, NA, NA, NA,…\n#> $ Voucher_Specimens      <chr> NA, NA, NA, NA, NA, NA, NA,…\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_raw\n#> # A tibble: 344 × 17\n#>    studyName `Sample Number` Species    Region Island Stage \n#>    <chr>               <dbl> <chr>      <chr>  <chr>  <chr> \n#>  1 PAL0708                 1 Adelie Pe… Anvers Torge… Adult…\n#>  2 PAL0708                 2 Adelie Pe… Anvers Torge… Adult…\n#>  3 PAL0708                 3 Adelie Pe… Anvers Torge… Adult…\n#>  4 PAL0708                 4 Adelie Pe… Anvers Torge… Adult…\n#>  5 PAL0708                 5 Adelie Pe… Anvers Torge… Adult…\n#>  6 PAL0708                 6 Adelie Pe… Anvers Torge… Adult…\n#>  7 PAL0708                 7 Adelie Pe… Anvers Torge… Adult…\n#>  8 PAL0708                 8 Adelie Pe… Anvers Torge… Adult…\n#>  9 PAL0708                 9 Adelie Pe… Anvers Torge… Adult…\n#> 10 PAL0708                10 Adelie Pe… Anvers Torge… Adult…\n#> # … with 334 more rows, and 11 more variables:\n#> #   Individual ID <chr>, Clutch Completion <chr>,\n#> #   Date Egg <date>, Culmen Length (mm) <dbl>,\n#> #   Culmen Depth (mm) <dbl>, Flipper Length (mm) <dbl>,\n#> #   Body Mass (g) <dbl>, Sex <chr>,\n#> #   Delta 15 N (o/oo) <dbl>, Delta 13 C (o/oo) <dbl>,\n#> #   Comments <chr>\npenguins\n#> # A tibble: 344 × 8\n#>    species island    bill_length_mm bill_depth_mm\n#>    <fct>   <fct>              <dbl>         <dbl>\n#>  1 Adelie  Torgersen           39.1          18.7\n#>  2 Adelie  Torgersen           39.5          17.4\n#>  3 Adelie  Torgersen           40.3          18  \n#>  4 Adelie  Torgersen           NA            NA  \n#>  5 Adelie  Torgersen           36.7          19.3\n#>  6 Adelie  Torgersen           39.3          20.6\n#>  7 Adelie  Torgersen           38.9          17.8\n#>  8 Adelie  Torgersen           39.2          19.6\n#>  9 Adelie  Torgersen           34.1          18.1\n#> 10 Adelie  Torgersen           42            20.2\n#> # … with 334 more rows, and 4 more variables:\n#> #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n#> #   year <int>\n\npenguins_raw %>% \n    dplyr::select(Species, Island, `Culmen Length (mm)`:Sex, `Date Egg`) %>% \n    dplyr::rename(species = Species,\n                  island = Island,\n                  bill_length_mm = `Culmen Length (mm)`,\n                  bill_depth_mm = `Culmen Depth (mm)`,\n                  flipper_length_mm = `Flipper Length (mm)`,\n                  body_mass_g = `Body Mass (g)`,\n                  sex = Sex,\n                  year = `Date Egg`) %>% \n    tidyr::separate(species, c(\"species\", NA, NA, NA, NA)) %>% \n    dplyr::mutate(sex = stringr::str_to_lower(sex),\n                  year = lubridate::year(year))\n#> # A tibble: 344 × 8\n#>    species island    bill_length_mm bill_depth_mm\n#>    <chr>   <chr>              <dbl>         <dbl>\n#>  1 Adelie  Torgersen           39.1          18.7\n#>  2 Adelie  Torgersen           39.5          17.4\n#>  3 Adelie  Torgersen           40.3          18  \n#>  4 Adelie  Torgersen           NA            NA  \n#>  5 Adelie  Torgersen           36.7          19.3\n#>  6 Adelie  Torgersen           39.3          20.6\n#>  7 Adelie  Torgersen           38.9          17.8\n#>  8 Adelie  Torgersen           39.2          19.6\n#>  9 Adelie  Torgersen           34.1          18.1\n#> 10 Adelie  Torgersen           42            20.2\n#> # … with 334 more rows, and 4 more variables:\n#> #   flipper_length_mm <dbl>, body_mass_g <dbl>, sex <chr>,\n#> #   year <dbl>\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\ncor(penguins$bill_length_mm, penguins$bill_depth_mm, use = \"na.or.complete\")\n#> [1] -0.2350529\n\npenguins %>%\n    dplyr::group_split(species) %>% \n    purrr::map(~cor(.x$bill_length_mm, .x$bill_depth_mm, use = \"na.or.complete\"))\n#> [[1]]\n#> [1] 0.3914917\n#> \n#> [[2]]\n#> [1] 0.6535362\n#> \n#> [[3]]\n#> [1] 0.6433839\ncovid_inicio_br <- lubridate::dmy(\"26-02-2020\")\nvacina <- lubridate::dmy(\"20-07-2021\")\n\nintervalo_covid <- lubridate::interval(covid_inicio_br, lubridate::today())\nintervalo_vacina <- lubridate::interval(covid_inicio_br, vacina)\n\nlubridate::as.period(intervalo_covid)\n#> [1] \"1y 11m 15d 0H 0M 0S\"\nlubridate::as.period(intervalo_vacina)\n#> [1] \"1y 4m 24d 0H 0M 0S\""},{"path":"cap.-15---dados-geoespaciais-no-r.html","id":"cap.-15---dados-geoespaciais-no-r","chapter":"Cap. 15 - Dados geoespaciais no R","heading":"Cap. 15 - Dados geoespaciais no R","text":"15.1\nImporte o limite dos estados brasileiros formato sf com o nome br. Para isso, use função ne_states pacote rnaturalearth. Crie um mapa simples cinza utilizando função plot(), selecionando coluna geometry com o operador $ e com os argumentos axes e graticule verdadeiros.Solução:15.2\nDados vetoriais podem ser criados com diversos erros de topologia, e.g., sobreposição de linhas ou polígonos ou buracos. Algumas funções exigem que os objetos vetoriais aos quais são atribuídos esses dados não possuam esses erros para que o algoritmo funcione. Para verificar se há erros, podemos usar função st_is_valid() pacote sf. Há diversas forma de correções desses erros, mas vamos usar uma correção simples R, com função st_make_valid(). Vamos fazer essa correção para o br importado anteriormente e atribuindo ao objeto br_valid. Podemos conferir para saber se há erros e fazer um plot.Solução:15.3\nCrie um objeto RasterLayer vazio chamado ra com reSolução: de 5º (~600 km). Atribua um sistema de referência de coordendas com o código 4326. Atribua valores aleatórios de uma distribuição normal e plote o mesmo.Solução:15.4\nReprojete o limite dos estados brasileiros exercício anterior para o CRS SIRGAS 2000/Brazil Polyconic, utilizando o código EPSG:5880 e chamando de br_poly. Faça um mapa simples como exercício 1. Atente para curvaturas das linhas.Solução:15.5\nUtilizando função st_centroid pacote sf, crie um vetor chamado br_valid_cen que armazenará o centroide de cada estado brasileiro objeto br_valid exercício 2 e plot o resultado.Solução:15.6\nAjuste o limite e máscara objeto raster criado exercício 3 para o limite Brasil, atribuindo ao objeto ra_br. Depois reprojete esse raster para mesma projeção utilizada exercício 4 com o nome ra_br_poly e plote o mapa resultante.Solução:15.7\nExtraia os valores de cada pixel raster criado exercício 6 para os centroides dos estados Brasil criado exercício 5, atribuindo à coluna val objeto espacial chamado br_valid_poly_cent_ra.Solução:15.8\nCrie um mapa final usando os resultados dos exercícios 4, 5 e 6. Utilize o pacote tmap e inclua todos os principais elementos de um mapa.Solução:","code":"\nlibrary(rnaturalearth)\nbr <- rnaturalearth::ne_states(country = \"Brazil\", returnclass = \"sf\")\nplot(br$geometry, col = \"gray\", axes = TRUE, graticule = TRUE)\nlibrary(sf)\n\nsf::st_is_valid(br)\n#>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n#> [10]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n#> [19]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n\nbr_valid <- sf::st_make_valid(br)\nsf::st_is_valid(br_valid)\n#>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n#> [12] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n#> [23] TRUE TRUE TRUE TRUE TRUE\n\nplot(br_valid$geometry, col = \"gray\", axes = TRUE, graticule = TRUE)\nlibrary(raster)\nra <- raster::raster(res = 5, crs = 4326)\nraster::values(ra) <- rnorm(raster::ncell(ra))\nplot(ra)\nlibrary(sf)\nlibrary(rnaturalearth)\n\nbr_valid_poly <- sf::st_transform(br_valid, crs = 5880)\nplot(br_valid_poly$geometry, col = \"gray\", axes = TRUE, graticule = TRUE)\nlibrary(sf)\nlibrary(rnaturalearth)\n\nbr_valid_poly_cen <- sf::st_centroid(br_valid_poly)\n\nplot(br_valid_poly$geometry, col = \"gray\", axes = TRUE, graticule = TRUE)\nplot(br_valid_poly_cen$geometry, pch = 20, add = TRUE)\nlibrary(raster)\n\nra_br <- ra %>% \n    raster::crop(br_valid) %>% \n    raster::mask(br_valid)\n\nra_br_poly <- raster::projectRaster(ra_br, crs = \"+init=epsg:5880\")\n\nplot(ra_br_poly)\nplot(br_valid_poly$geometry, add = TRUE)\nplot(br_valid_poly_cen$geometry, pch = 20, add = TRUE)\nbr_valid_poly_cent_ra <- br_valid_poly_cen %>% \n    dplyr::mutate(val = raster::extract(ra_br_poly, .))\nhead(br_valid_poly_cent_ra$val)\n#> [1]  1.0238284 -1.0381480 -0.4493325  0.3284137 -0.1762245\n#> [6]  0.7180757\nlibrary(tmap)\n\ntm_shape(ra_br_poly) +\n    tm_raster(title = \"Raster\") +\n    tm_shape(br_valid_poly) +\n    tm_borders() +\n    tm_shape(br_valid_poly_cent_ra) +\n    tm_bubbles(col = \"val\", size = .2, legend.col.show = FALSE) +\n    tm_graticules(lines = FALSE, \n                  labels.format = list(big.mark = \"\"), \n                  labels.rot = c(0, 90),\n                  labels.size = .7) +\n    tm_compass(position = c(\"right\", \"top\"), size = 2) +\n    tm_scale_bar(size = 1) +\n    tm_xlab(\"Longitude\", size = 1) +\n    tm_ylab(\"Latitude\", size = 1) +\n    tm_credits(\"CRS: SIRGAS2000/Policônica\", position = c(.6, .15), size = .6) +\n    tm_credits(\"Fonte: Natural Earth (2022)\", position = c(.6, .12), size = .6) +\n    tm_layout(main.title = \"Estados do Brasil\",\n              main.title.position = c(.1, .95),\n              main.title.size = 1.5,\n              title.fontface = \"bold\",\n              legend.position = c(\"left\", \"bottom\"),\n              legend.title.fontface = \"bold\")"}]
